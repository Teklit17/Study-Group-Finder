
@model IEnumerable<SG_Finder.Models.Message>
@{
ViewData["Title"] = "Messages";
}

<h2>Messages</h2>

<!-- Message List -->
<ul id="messageList">
    @foreach (var message in Model)
    {
    <li>
        <strong>From @message.SenderID:</strong> @message.Content
    </li>
    }
</ul>

<hr />

<!-- Include the New Message Form -->
<!-- Include the New Message Form -->
@await Html.PartialAsync("_Create", new SG_Finder.Models.Message { SenderID = "someSenderId", ReceiverID = "someReceiverId" })
<!-- Include SignalR library -->
<!-- Include the SignalR client library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

<!-- Your custom JavaScript code that uses SignalR --><script>
    // Build the SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/StudyHub")  // The URL to your hub
        .configureLogging(signalR.LogLevel.Information)  // Enables more detailed logging
        .build();

    // Start the connection
    connection.start()
        .then(() => console.log("SignalR connection started successfully."))
        .catch(err => console.error("SignalR connection error:", err.toString()));

    // Log connection close event
    connection.onclose(error => {
        console.error("SignalR connection closed. Error:", error ? error.toString() : "Connection closed");
    });

    // Listen for incoming messages from the SignalR hub
    connection.on("ReceiveMessage", (senderId, content) => {
        console.log(`Received message from ${senderId}: ${content}`);
        // Append the new message to the DOM (for testing)
        const messageList = document.getElementById("messageList");
        const newMessage = document.createElement("li");
        newMessage.innerHTML = `<strong>From ${senderId}:</strong> ${content}`;
        messageList.prepend(newMessage); // Add the new message to the top of the list
    });
</script>
